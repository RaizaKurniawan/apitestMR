{
  "stats": {
    "suites": 4,
    "tests": 21,
    "passes": 19,
    "pending": 0,
    "failures": 2,
    "start": "2023-12-21T06:54:00.470Z",
    "end": "2023-12-21T06:54:03.426Z",
    "duration": 2956,
    "testsRegistered": 21,
    "passPercent": 90.47619047619048,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "140eb927-4436-4e2b-a32b-504232b8fffb",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
          "title": "Ascending and Descending Mythic Files",
          "fullFile": "C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js",
          "file": "\\apiMythRepo\\dev\\ascdesSortv2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the data is Confirmed in Mythic",
              "fullTitle": "Ascending and Descending Mythic Files Verify that the data is Confirmed in Mythic",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is confirmed, isConfirmed: true*/\nconst conMythAscs = supertest(createURL('confirmed/mythic?sortBy=3'));\nconst responses = await conMythAscs.get(''); \nresponses.body.data.mythic.forEach(conMythAscs => {\n    console.log(\"Ensure that the Data isConfirmed: true \\n\" + \"actual --> \" + conMythAscs.code + \" \" + conMythAscs.isConfirmed);\n    expect(conMythAscs.isConfirmed).to.be.true;\n});",
              "err": {},
              "uuid": "82eae91d-e766-472c-8b26-871400836387",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the data is Ascending in Mythic",
              "fullTitle": "Ascending and Descending Mythic Files Verify that the data is Ascending in Mythic",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conMythAsc = await axios.get(createURL('confirmed/mythic?sortBy=3'));\n assert.equal(conMythAsc.status, 200);\n assert.exists(conMythAsc.data);\n const data = conMythAsc.data;\n // Check urutan Ascending berdasarkan \"code\" Mythic\n for (let i = 0; i < data.length; i++) {\n     const currentCode = data[i].code;\n     const nextCode = data[i + 1].code;\n     assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n }\n //Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\n function compareCodeAscending(code1, code2) {\n     const codeNumber1 = parseInt(code1.split('-')[1]);\n     const codeNumber2 = parseInt(code2.split('-')[1]);\n     \n     // Cek kode pertama lebih kecil dari kode kedua\n     return codeNumber1 < codeNumber2;\n }",
              "err": {},
              "uuid": "8e1ede44-3341-4e4d-af48-e7be01a85d3e",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in Confirmed Mythic Files",
              "fullTitle": "Ascending and Descending Mythic Files Verify the data is Descending in Confirmed Mythic Files",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conMythDesc = await axios.get(createURL('confirmed/mythic?sortBy=2'))\nassert.equal(conMythDesc.status, 200);\nassert.exists(conMythDesc.data);\nconst data = conMythDesc.data;\n\n//Check urutan Descending berdasarkan code Mythic\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Descending')\n}\n\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar dari kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "54fe5672-07d2-482d-bb3f-49a9e764fec7",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure the data is Unconfirmed Mythic",
              "fullTitle": "Ascending and Descending Mythic Files Ensure the data is Unconfirmed Mythic",
              "timedOut": false,
              "duration": 177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is Unconfirmed, isConfirmed: false*/\nconst unconMythAscs = supertest(createURL('unconfirmed/mythic?sortBy=3'));\nconst responses = await unconMythAscs.get(''); \nresponses.body.data.mythic.forEach(unconMythAscs => {\n    console.log(\"Ensure that the Data isConfirmed: false \\n\" + \"actual --> \" + unconMythAscs.code + \" \" + unconMythAscs.isConfirmed);\n    expect(unconMythAscs.isConfirmed).to.be.false;\n});",
              "err": {},
              "uuid": "2531bbfe-db41-4b19-8cc4-ab6066b8d88c",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Ascending in Unconfirmed Mythic",
              "fullTitle": "Ascending and Descending Mythic Files Verify the data is Ascending in Unconfirmed Mythic",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconMythAsc = await axios.get(createURL('unconfirmed/mythic?sortBy=3'));\nassert.equal(unconMythAsc.status, 200);\nassert.exists(unconMythAsc.data);\nconst data = unconMythAsc.data;\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');            \n}\n// Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\nfunction compareCodeAscending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih kecil dari kode kedua\n    return codeNumber1 < codeNumber2;\n}",
              "err": {},
              "uuid": "1ce517df-00fb-40ee-a36c-29ce194333c8",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in Unconfirmed Mythic",
              "fullTitle": "Ascending and Descending Mythic Files Verify the data is Descending in Unconfirmed Mythic",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconMythDesc = await axios.get(createURL('unconfirmed/mythic?sortBy=2'))\nassert.equal(unconMythDesc.status, 200);\nassert.exists(unconMythDesc.data);\nconst data = unconMythDesc.data;\n// Cek urutan Descending berdasarkan code Mythic\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar daripada kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "5e0940c5-2d2d-4fe8-9f2a-0405ce667a3e",
              "parentUUID": "8bc2084e-1a4f-430c-a433-2eceb7b8b643",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82eae91d-e766-472c-8b26-871400836387",
            "8e1ede44-3341-4e4d-af48-e7be01a85d3e",
            "54fe5672-07d2-482d-bb3f-49a9e764fec7",
            "2531bbfe-db41-4b19-8cc4-ab6066b8d88c",
            "1ce517df-00fb-40ee-a36c-29ce194333c8",
            "5e0940c5-2d2d-4fe8-9f2a-0405ce667a3e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 573,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "71ecffd6-c640-4b32-987f-88fcd143a68e",
          "title": "Ascending and Descending Casefiles",
          "fullFile": "C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js",
          "file": "\\apiMythRepo\\dev\\ascdesSortv2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the data is Confirmed Casefile",
              "fullTitle": "Ascending and Descending Casefiles Verify that the data is Confirmed Casefile",
              "timedOut": false,
              "duration": 227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is confirmed, isConfirmed: true*/\nconst conCasfAscs = supertest(createURL('confirmed/casefile?sortBy=3'));\nconst responses = await conCasfAscs.get(''); \nresponses.body.data.casefile.forEach(conCasfAscs => {\n    console.log(\"Ensure that the Data isConfirmed: true \\n\" + \"actual --> \" + conCasfAscs.code + \" \" + conCasfAscs.isConfirmed);\n    expect(conCasfAscs.isConfirmed).to.be.true;\n});",
              "err": {},
              "uuid": "1a3750df-10ae-4400-a800-1043c8b17710",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the data is Ascending in Casefile",
              "fullTitle": "Ascending and Descending Casefiles Verify that the data is Ascending in Casefile",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conCasfAsc = await axios.get(createURL('confirmed/mythic?sortBy=3'));\n assert.equal(conCasfAsc.status, 200);\n assert.exists(conCasfAsc.data);\n \n const data = conCasfAsc.data;\n \n // Check urutan Ascending berdasarkan \"code\" Mythic\n for (let i = 0; i < data.length; i++) {\n     const currentCode = data[i].code;\n     const nextCode = data[i + 1].code;\n     assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n }\n \n //Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\n function compareCodeAscending(code1, code2) {\n     const codeNumber1 = parseInt(code1.split('-')[1]);\n     const codeNumber2 = parseInt(code2.split('-')[1]);\n     \n     // Cek kode pertama lebih kecil dari kode kedua\n     return codeNumber1 < codeNumber2;\n }",
              "err": {},
              "uuid": "1dc3727a-27d9-43bb-b8f0-5ed93c81d922",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in Confirmed Casefile",
              "fullTitle": "Ascending and Descending Casefiles Verify the data is Descending in Confirmed Casefile",
              "timedOut": false,
              "duration": 248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conCasfDesc = await axios.get(createURL('confirmed/casefile?sortBy=2'))\nassert.equal(conCasfDesc.status, 200);\nassert.exists(conCasfDesc.data);\nconst data = conCasfDesc.data;\n// Melakukan cek urutan Descending berdasarkan code Casefile\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Descending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Descneding atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar dari kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "db13e012-6f6e-4173-8ad2-5af03246f2ad",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure the data is Unconfirmed Casefile",
              "fullTitle": "Ascending and Descending Casefiles Ensure the data is Unconfirmed Casefile",
              "timedOut": false,
              "duration": 99,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is Unconfirmed, isConfirmed: false*/\nconst unconCaseAscs = supertest(createURL('unconfirmed/casefile?sortBy=3'));\nconst responses = await unconCaseAscs.get(''); \nresponses.body.data.casefile.forEach(unconCaseAscs => {\n    console.log(\"Ensure that the Data isConfirmed: false \\n\" + \"actual --> \" + unconCaseAscs.code + \" \" + unconCaseAscs.isConfirmed);\n    expect(unconCaseAscs.isConfirmed).to.be.false;\n});",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js:189:52\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (apiMythRepo\\dev\\ascdesSortv2.js:187:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "64a717dd-b8bd-440a-a81e-2a983b15e623",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Ascending in Unconfirmed Casefile",
              "fullTitle": "Ascending and Descending Casefiles Verify the data is Ascending in Unconfirmed Casefile",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconCaseAsc = await axios.get(createURL('unconfirmed/casefile?sortBy=3'));\nassert.equal(unconCaseAsc.status, 200);\nassert.exists(unconCaseAsc.data);\nconst data = unconCaseAsc.data;\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Asending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\nfunction compareCodeAscending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih kecil dari kode kedua\n    return codeNumber1 < codeNumber2;\n}",
              "err": {},
              "uuid": "bb50d461-59d1-428a-a02c-c747c25cfefd",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Descending in unconfirmed Casefile",
              "fullTitle": "Ascending and Descending Casefiles Descending in unconfirmed Casefile",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconCaseDesc = await axios.get(createURL('unconfirmed/casefile?sortBy=2'))\nassert.equal(unconCaseDesc.status, 200);\nassert.exists(unconCaseDesc.data);\nconst data = unconCaseDesc.data;\n// Cek urutan Descending berdasarkan code Mythic\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar daripada kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "cfafd657-9d76-4e14-ab6e-aac5fce67ec6",
              "parentUUID": "71ecffd6-c640-4b32-987f-88fcd143a68e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1a3750df-10ae-4400-a800-1043c8b17710",
            "1dc3727a-27d9-43bb-b8f0-5ed93c81d922",
            "db13e012-6f6e-4173-8ad2-5af03246f2ad",
            "bb50d461-59d1-428a-a02c-c747c25cfefd",
            "cfafd657-9d76-4e14-ab6e-aac5fce67ec6"
          ],
          "failures": [
            "64a717dd-b8bd-440a-a81e-2a983b15e623"
          ],
          "pending": [],
          "skipped": [],
          "duration": 663,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "422582d9-0ccb-413a-8033-2770535f7bda",
          "title": "Ascending and Descending Dossier",
          "fullFile": "C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js",
          "file": "\\apiMythRepo\\dev\\ascdesSortv2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Ensure the data is Confirmed Dossier",
              "fullTitle": "Ascending and Descending Dossier Ensure the data is Confirmed Dossier",
              "timedOut": false,
              "duration": 865,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is confirmed, isConfirmed: true*/\nconst conDosAscs = supertest(createURL('dossier?sortBy=3'));\nconst responses = await conDosAscs.get(''); \nresponses.body.data.dossier.forEach(conDosAscs => {\n    console.log(\"Ensure that the Data isConfirmed: true \\n\" + \"actual --> \" + conDosAscs.code + \" \" + conDosAscs.isConfirmed);\n    expect(conDosAscs.isConfirmed).to.be.true;\n});",
              "err": {},
              "uuid": "94f9422b-0f5e-4173-bbe7-8fc4dc3f802f",
              "parentUUID": "422582d9-0ccb-413a-8033-2770535f7bda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Ascending in Dossier",
              "fullTitle": "Ascending and Descending Dossier Verify the data is Ascending in Dossier",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conDosDataAsc = await axios.get(createURL('dossier?sortBy=3'))\nassert.equal(conDosDataAsc.status, 200);\nassert.exists(conDosDataAsc.data);\nconst data = conDosDataAsc.data;\nfor (let i = 0; i < data.length - i; i++){\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeAscending(currentCode, nextCode),'Data tidak dalam urutan Ascending');\n}\n       // Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\nfunction compareCodeAscending(code1, code2) {\nconst codeNumber1 = parseInt(code1.split('-')[1]);\nconst codeNumber2 = parseInt(code2.split('-')[1]);\n     // Cek apakah kode pertama lebih kecil dari kode kedua\nreturn codeNumber1 < codeNumber2;\n       }",
              "err": {},
              "uuid": "9166609d-3b33-47ac-a1e8-014fcdefd921",
              "parentUUID": "422582d9-0ccb-413a-8033-2770535f7bda",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in Dossier",
              "fullTitle": "Ascending and Descending Dossier Verify the data is Descending in Dossier",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conDosDesc = await axios.get(createURL('dossier?sortBy=2'))\nassert.equal(conDosDesc.status, 200);\nassert.exists(conDosDesc.data);\nconst data = conDosDesc.data;\n// Check urutan Descending berdasarkan code Dossier\nfor (let i = 0; i < data.length - 1; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Descending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    \n    // Cek apakah kode pertama lebih besar dari kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "43accb3a-1ea1-411f-83ef-b229207b070b",
              "parentUUID": "422582d9-0ccb-413a-8033-2770535f7bda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94f9422b-0f5e-4173-bbe7-8fc4dc3f802f",
            "9166609d-3b33-47ac-a1e8-014fcdefd921",
            "43accb3a-1ea1-411f-83ef-b229207b070b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1129,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        },
        {
          "uuid": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
          "title": "Ascending and Descending Addendum",
          "fullFile": "C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js",
          "file": "\\apiMythRepo\\dev\\ascdesSortv2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that the data is Confirmed in Addendum",
              "fullTitle": "Ascending and Descending Addendum Verify that the data is Confirmed in Addendum",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conAddAsc = await axios.get(createURL('confirmed/addendum?sortBy=3'))\n/* Verify, ensure that the Data is confirmed, isConfirmed: true*/\nconst conAddAscs = supertest(createURL('confirmed/addendum?sortBy=3'));\nconst responses = await conAddAscs.get(''); \nresponses.body.data.addendum.forEach(conAddAscs => {\n    console.log(\"Ensure that the Data isConfirmed: true \\n\" + \"actual --> \" + conAddAscs.code + \" \" + conAddAscs.isConfirmed);\n    expect(conAddAscs.isConfirmed).to.be.true;\n});",
              "err": {},
              "uuid": "355f7338-bb3d-45d2-921d-65aca350f8cd",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that the data is Ascending in Addendum",
              "fullTitle": "Ascending and Descending Addendum Verify that the data is Ascending in Addendum",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conAddAscs = await axios.get(createURL('confirmed/addendum?sortBy=3'));\n assert.equal(conAddAscs.status, 200);\n assert.exists(conAddAscs.data);\n \n const data = conAddAscs.data;\n \n // Check urutan Ascending berdasarkan \"code\" Mythic\n for (let i = 0; i < data.length; i++) {\n     const currentCode = data[i].code;\n     const nextCode = data[i + 1].code;\n     assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n }\n \n //Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\n function compareCodeAscending(code1, code2) {\n     const codeNumber1 = parseInt(code1.split('-')[1]);\n     const codeNumber2 = parseInt(code2.split('-')[1]);\n     \n     // Cek kode pertama lebih kecil dari kode kedua\n     return codeNumber1 < codeNumber2;\n }",
              "err": {},
              "uuid": "9f8989fb-b27f-42b1-b667-6825fdab4057",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in Confirmed Addendum",
              "fullTitle": "Ascending and Descending Addendum Verify the data is Descending in Confirmed Addendum",
              "timedOut": false,
              "duration": 108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const conAddDesc = await axios.get(createURL('confirmed/addendum?sortBy=2'))\nassert.equal(conAddDesc.status, 200);\nassert.exists(conAddDesc.data);\nconst data = conAddDesc.data;\n\n//Check urutan Descending berdasarkan code Mythic\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Descending')\n}\n\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar dari kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "449ee436-184c-443c-97d2-5a0e48ff5cc9",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ensure the data is Unconfirmed Addendum",
              "fullTitle": "Ascending and Descending Addendum Ensure the data is Unconfirmed Addendum",
              "timedOut": false,
              "duration": 98,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "/* Verify, ensure that the Data is Unconfirmed, isConfirmed: false*/\nconst unconAddAscs = supertest(createURL('unconfirmed/addendum?sortBy=3'));\nconst responses = await unconAddAscs.get(''); \nresponses.body.data.addendum.forEach(unconAddAscs => {\n    console.log(\"Ensure that the Data isConfirmed: false \\n\" + \"actual --> \" + unconAddAscs.code + \" \" + unconAddAscs.isConfirmed);\n    expect(unconAddAscs.isConfirmed).to.be.false;\n});",
              "err": {
                "message": "AssertionError: expected true to be false",
                "estack": "AssertionError: expected true to be false\n    at C:\\raizakurniawan\\apitestMR\\apiMythRepo\\dev\\ascdesSortv2.js:367:51\n    at Array.forEach (<anonymous>)\n    at Context.<anonymous> (apiMythRepo\\dev\\ascdesSortv2.js:365:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- true\n+ false\n"
              },
              "uuid": "47d44cb6-ca85-4b69-8a44-61331ebec6a5",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Ascending in Unconfirmed Addendum",
              "fullTitle": "Ascending and Descending Addendum Verify the data is Ascending in Unconfirmed Addendum",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconAddAsc = await axios.get(createURL('unconfirmed/addendum?sortBy=3'));\nassert.equal(unconAddAsc.status, 200);\nassert.exists(unconAddAsc.data);\nconst data = unconAddAsc.data;\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeAscending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');            \n}\n// Fungsi untuk membandingkan dua kode apakah sudah Ascending atau belum\nfunction compareCodeAscending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih kecil dari kode kedua\n    return codeNumber1 < codeNumber2;\n}",
              "err": {},
              "uuid": "1e2d5376-454a-4351-99d8-49e7a373164f",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the data is Descending in unconfirmed Addendum",
              "fullTitle": "Ascending and Descending Addendum Verify the data is Descending in unconfirmed Addendum",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const unconAddDesc = await axios.get(createURL('unconfirmed/addendum?sortBy=2'))\nassert.equal(unconAddDesc.status, 200);\nassert.exists(unconAddDesc.data);\nconst data = unconAddDesc.data;\n// Cek urutan Descending berdasarkan code Mythic\nfor (let i = 0; i < data.length; i++) {\n    const currentCode = data[i].code;\n    const nextCode = data[i + 1].code;\n    assert.isTrue(compareCodeDescending(currentCode, nextCode), 'Data tidak dalam urutan Ascending');\n}\n// Fungsi untuk membandingkan dua kode apakah sudah Descending atau belum\nfunction compareCodeDescending(code1, code2) {\n    const codeNumber1 = parseInt(code1.split('-')[1]);\n    const codeNumber2 = parseInt(code2.split('-')[1]);\n    // Cek apakah kode pertama lebih besar daripada kode kedua\n    return codeNumber1 > codeNumber2;\n}",
              "err": {},
              "uuid": "9a48707f-3b79-455d-8524-ff04b599abb2",
              "parentUUID": "1d777869-1d99-4b46-aa29-cc239c7b4e79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "355f7338-bb3d-45d2-921d-65aca350f8cd",
            "9f8989fb-b27f-42b1-b667-6825fdab4057",
            "449ee436-184c-443c-97d2-5a0e48ff5cc9",
            "1e2d5376-454a-4351-99d8-49e7a373164f",
            "9a48707f-3b79-455d-8524-ff04b599abb2"
          ],
          "failures": [
            "47d44cb6-ca85-4b69-8a44-61331ebec6a5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 576,
          "root": false,
          "rootEmpty": false,
          "_timeout": 21000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 21000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}